import base64
import datetime
import io
import os
import pathlib
import exifread

from PIL import Image

photos_dir = pathlib.Path('./public/photos')

# output = sys.stdout
with open('./components/photos.tsx', 'w') as output:
    print('''
// this file is automatically generated by running `python3 process_images.py` 

export class PhotoProps{
    constructor(
        public src: string, 
        public title: string, 
        public slug: string,
        public width: number, 
        public height: number,
        public createdAt: Date, 
        public blurDataUrl: string) 
    {}
}

''', file=output)

    photos = []
    for path in photos_dir.glob('**/*.[jJ][pP][gG]'):
        print(path)
        relative_file_name = str(path)[len(str(photos_dir)) + 1:]
        variable_name = relative_file_name[:-4].translate(''.maketrans({
            ' ': '_',
            '.': '_',
            '-': '_',
            ')': '_',
            '(': '_',
            '/': '__',
            'ä': 'ae',
            'Ä': 'Ae',
            'ü': 'ue',
            'Ü': 'Ue',
            'ö': 'oe',
            'Ö': 'Oe'
        }
        ))

        slug=path.stem.replace(' ','-').lower()

        if variable_name[0].isdigit():
            variable_name = '_' + variable_name

        with path.open('rb') as f:
            if exif_date := exifread.process_file(f).get('EXIF DateTimeOriginal'):
                timestamp = datetime.datetime.strptime(str(exif_date), '%Y:%m:%d %H:%M:%S')
            else:
                timestamp = datetime.datetime.fromtimestamp(os.stat(path).st_birthtime)

        with Image.open(path) as image:
            width = image.width
            height = image.height

            image.thumbnail(size=(50, 50))
            # image.show()

            buffered = io.BytesIO()
            image.save(buffered, format="PNG")
            blurDataUrl = 'data:image/jpeg;base64,' + base64.b64encode(buffered.getvalue()).decode("utf-8")

            photos.append(
                (variable_name,
                 f'''new PhotoProps('/photos/{relative_file_name}', '{path.stem}', '{slug}', {width}, {height}, new Date('{timestamp}'), '{blurDataUrl}')''',
                 timestamp)
            )


    photos.sort(key=lambda x: x[2],reverse=True)

    print(f'''export const photos = {{''', file=output)

    for (variable_name, photo, _) in photos:
        print(f'''    {variable_name}: {photo},''', file=output)

    print(f'''}}

export default photos
''', file=output)

